# ==============================================================================
# AMBIENTE DE DESENVOLVIMENTO COM DOCKER COMPOSE (OTIMIZADO)
# ==============================================================================
services:
  # --- Serviço do Backend (API) ---
  backend:
    build:
      context: .
      dockerfile: Dockerfile  # Usa o Dockerfile principal
    command: uvicorn src.api:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy # CORREÇÃO: O backend só precisa esperar pelo DB

  # --- Serviço do Banco de Dados (PostgreSQL) ---
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Serviço do MLflow Tracking Server ---
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow # CORREÇÃO: Usa o novo Dockerfile dedicado
    command: > # CORREÇÃO: O comando não precisa mais do 'pip install'
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri $$DATABASE_URL
      --default-artifact-root /mlflow_artifacts
    volumes:
      - mlflow_data:/mlflow_artifacts # Persiste os artefatos
    ports:
      - "5000:5000"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  mlflow_data:
